{"version":3,"sources":["webpack:///./src/pages/register.js"],"names":["Register","location","useState","loading","setLoading","apiError","setApiError","updateToken","useContext","AuthContext","useForm","register","name","values","email","password","then","data","id","token","localStorage","setItem","navigate","catch","e","console","log","errors","validate","handleChange","handleSubmit","title","as","onSubmit","error","length","Array","isArray","header","content","map","detail","key","status","handleErrors","Field","htmlFor","fluid","autoFocus","onChange","value","style","color","type","test"],"mappings":"oTA2GeA,UA/FE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACDC,oBAAS,GAAhCC,EADwB,KACfC,EADe,OAECF,mBAAS,IAAlCG,EAFwB,KAEdC,EAFc,KAGxBC,EAAeC,qBAAWC,KAA1BF,YAHwB,EA0BsBG,aArBhC,WACnBN,GAAW,GACXO,mBAAS,CACPC,KAAMC,EAAOD,KACbE,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,WAEhBC,MAAK,SAAAC,GAAS,IACNC,EAAaD,EAAbC,GAAIC,EAASF,EAATE,MACXC,aAAaC,QAAQ,gBAAiBF,GACtCC,aAAaC,QAAQ,YAAaH,GAClCX,IACAe,mBAAS,kBAEVC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZpB,GAAW,GACXE,EAAYkB,EAAEG,QAAUH,QAM5BI,GAFKf,EA1BwB,EA0BxBA,OAAQgB,EA1BgB,EA0BhBA,aAAcC,EA1BE,EA0BFA,aAAcH,EA1BZ,EA0BYA,OAgB3C,OACE,kBAAC,IAAD,CAAQ1B,SAAUA,GAChB,kBAAC,IAAD,CAAK8B,MAAM,aACX,kBAAC,IAAD,CAAQC,GAAG,MAAX,qBACA,kBAAC,IAAD,CAAMC,SAAUH,EAAc3B,QAASA,EAAS+B,QAASP,GAClC,IAApBtB,EAAS8B,OAhBK,SAAAR,GACnB,OAAKS,MAAMC,QAAQV,KAAYA,EAAOQ,OAAS,EAE3C,kBAAC,IAAD,CAASD,OAAK,EAACI,OAAO,QAAQC,QAAQ,kCAGnCZ,EAAOa,KAAI,SAAAhB,GAAC,OACjB,kBAAC,IAAD,CAASU,OAAK,EAACI,OAAQd,EAAEO,MAAOQ,QAASf,EAAEiB,OAAQC,IAAKlB,EAAEmB,YAS/BC,CAAajB,GAAU,KAChD,kBAAC,IAAD,KACE,kBAAC,IAAKkB,MAAN,KACE,2BAAOC,QAAQ,QAAf,QACA,kBAAC,IAAD,CACE5B,GAAG,OACH6B,OAAK,EACLnC,KAAK,OACLoC,WAAS,EACTC,SAAUpB,EACVqB,MAAOrC,EAAOD,MAAQ,MAGzBe,EAAOf,MAAQ,uBAAGuC,MAAO,CAACC,MAAO,QAASzB,EAAOf,MAElD,kBAAC,IAAKiC,MAAN,KACE,2BAAOC,QAAQ,SAAf,SACA,kBAAC,IAAD,CACE5B,GAAG,QACH6B,OAAK,EACLnC,KAAK,QACLyC,KAAK,QACLJ,SAAUpB,EACVqB,MAAOrC,EAAOC,OAAS,MAG1Ba,EAAOb,OAAS,uBAAGqC,MAAO,CAACC,MAAO,QAASzB,EAAOb,OACnD,kBAAC,IAAK+B,MAAN,KACE,2BAAOC,QAAQ,YAAf,YACA,kBAAC,IAAD,CACE5B,GAAG,WACH6B,OAAK,EACLnC,KAAK,WACLyC,KAAK,WACLJ,SAAUpB,EACVqB,MAAOrC,EAAOE,UAAY,MAG7BY,EAAOZ,UAAY,uBAAGoC,MAAO,CAACC,MAAO,QAASzB,EAAOZ,UACtD,kBAAC,IAAD,CAAQsC,KAAK,SAASD,MAAM,UAA5B,gBAWV,IAAMxB,EAAW,SAAAf,GACf,IAAMc,EAAS,GAYf,OAXKd,EAAOC,MAEA,eAAewC,KAAKzC,EAAOC,SACrCa,EAAOb,MAAQ,4BAFfa,EAAOb,MAAQ,4BAIZD,EAAOE,WACVY,EAAOZ,SAAW,wBAEfF,EAAOD,OACVe,EAAOf,KAAO,sBAETe","file":"component---src-pages-register-js-a4dad031d53aec5fff18.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable no-use-before-define */\n\nimport React, {useState, useContext} from 'react'\nimport {navigate} from 'gatsby'\nimport {Header, Form, Input, Button, Segment, Message} from 'semantic-ui-react'\nimport SEO from '../components/SEO'\nimport AuthContext from '../components/Context/AuthContext'\nimport {register} from '../../lib/moltin'\nimport Layout from '../components/Layout'\nimport useForm from '../components/Hooks/useForm'\n\nconst Register = ({location}) => {\n  const [loading, setLoading] = useState(false)\n  const [apiError, setApiError] = useState([])\n  const {updateToken} = useContext(AuthContext)\n\n  const formRegister = () => {\n    setLoading(true)\n    register({\n      name: values.name,\n      email: values.email,\n      password: values.password,\n    })\n      .then(data => {\n        const {id, token} = data\n        localStorage.setItem('customerToken', token)\n        localStorage.setItem('mcustomer', id)\n        updateToken()\n        navigate('/myaccount/')\n      })\n      .catch(e => {\n        console.log(e)\n        setLoading(false)\n        setApiError(e.errors || e)\n      })\n  }\n\n  const {values, handleChange, handleSubmit, errors} = useForm(\n    formRegister,\n    validate,\n  )\n\n  const handleErrors = errors => {\n    if (!Array.isArray(errors) && !errors.length > 0) {\n      return (\n        <Message error header=\"Sorry\" content=\"Cannot register at this time.\" />\n      )\n    }\n    return errors.map(e => (\n      <Message error header={e.title} content={e.detail} key={e.status} />\n    ))\n  }\n\n  return (\n    <Layout location={location}>\n      <SEO title=\"Register\" />\n      <Header as=\"h1\">Create an account</Header>\n      <Form onSubmit={handleSubmit} loading={loading} error={!!errors}>\n        {apiError.length !== 0 ? handleErrors(errors) : null}\n        <Segment>\n          <Form.Field>\n            <label htmlFor=\"name\">Name</label>\n            <Input\n              id=\"name\"\n              fluid\n              name=\"name\"\n              autoFocus\n              onChange={handleChange}\n              value={values.name || ''}\n            />\n          </Form.Field>\n          {errors.name && <p style={{color: 'red'}}>{errors.name}</p>}\n\n          <Form.Field>\n            <label htmlFor=\"email\">Email</label>\n            <Input\n              id=\"email\"\n              fluid\n              name=\"email\"\n              type=\"email\"\n              onChange={handleChange}\n              value={values.email || ''}\n            />\n          </Form.Field>\n          {errors.email && <p style={{color: 'red'}}>{errors.email}</p>}\n          <Form.Field>\n            <label htmlFor=\"password\">Password</label>\n            <Input\n              id=\"password\"\n              fluid\n              name=\"password\"\n              type=\"password\"\n              onChange={handleChange}\n              value={values.password || ''}\n            />\n          </Form.Field>\n          {errors.password && <p style={{color: 'red'}}>{errors.password}</p>}\n          <Button type=\"submit\" color=\"orange\">\n            Register\n          </Button>\n        </Segment>\n      </Form>\n    </Layout>\n  )\n}\n\nexport default Register\n\nconst validate = values => {\n  const errors = {}\n  if (!values.email) {\n    errors.email = 'Email address is required'\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email address is invalid'\n  }\n  if (!values.password) {\n    errors.password = 'Password is required'\n  }\n  if (!values.name) {\n    errors.name = 'A name is required'\n  }\n  return errors\n}\n"],"sourceRoot":""}